{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","inputs","numbers","handleChange","bind","Reverse","this","main_sent","console","log","p","split","i","length","a","l","new_sentence","j","push","join","answer","alert","event","setState","target","name","value","className","TextareaAutosize","aria-label","rowsMin","placeholder","onChange","TextField","size","variant","Button","color","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAmGeA,E,kDAxFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,OAAQ,GAAIC,QAAS,IAInC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAPE,E,2CAWnB,WAIC,MAA0BE,KAAKN,MAAvBC,EAAR,EAAQA,OAAOC,EAAf,EAAeA,QAGVK,EAAY,GAEXC,QAAQC,IAAIR,GAEZ,IADA,IAAIS,EAAIT,EAAOU,MAAM,KACZC,EAAI,EAAIA,EAAIF,EAAEG,OAAUD,IAAK,CACtC,IAAIE,EAAIJ,EAAEE,GAAGD,MAAM,KAEfI,EAAKD,EAAED,OAEZ,GAAKE,EAAIb,EAAS,CAGvB,IADC,IAAIc,EAAe,GACXC,EAAE,EAAGA,EAAEF,EAAEE,IAElBD,EAAaC,GADVA,EAAGF,EAAEb,EAAQ,EACEY,EAAEG,GAEFH,EAAEC,EAAEb,EAAQe,EAAE,GAIhCV,EAAUW,KAAKF,EAAaG,KAAK,WAKjCZ,EAAUW,KAAKJ,EAAEK,KAAK,MAKlB,IAAIC,EAASb,EAAUY,KAAK,KAChCE,MAAMD,K,0BAOP,SAAaE,GACXhB,KAAKiB,SAAL,eACGD,EAAME,OAAOC,KAAQH,EAAME,OAAOE,U,oBASvC,WAGE,OACE,sBAAMC,UAAU,QAAhB,UAEA,8CAEA,cAACC,EAAA,EAAD,CAAkBH,KAAM,SAASI,aAAW,iBAAiBC,QAAS,EAAGC,YAAY,sBAAsBL,MAAOpB,KAAKN,MAAMC,OAAQ+B,SAAU1B,KAAKH,eACpJ,2CAAa,cAAC8B,EAAA,EAAD,CAAWN,UAAU,SAASF,KAAK,UAAUS,KAAK,QAAQC,QAAQ,WAAWT,MAAOpB,KAAKN,MAAME,QAAS8B,SAAU1B,KAAKH,eAApI,0BAEA,cAACiC,EAAA,EAAD,CAAQD,QAAQ,YAAYE,MAAM,UAAWC,QAAShC,KAAKD,QAA3D,wB,GAjFYkC,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.176a46bb.chunk.js","sourcesContent":["import { TextareaAutosize } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { TextField } from '@material-ui/core';\nimport React, {Component} from 'react';\n\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  \n  constructor(props) {\n    super(props);\n    this.state = {inputs: '', numbers: ''};\n    \n    \n\n    this.handleChange = this.handleChange.bind(this);\n    this.Reverse = this.Reverse.bind(this);\n    \n  }\n  \n  Reverse()\n  {\n    \n     \n   const { inputs,numbers} = this.state;\n   \n    \n    var main_sent = []\n        \n         console.log(inputs)\n         var p = inputs.split(\".\");\n         for (var i = 0 ; i < p.length  ; i++) {\n         var a = p[i].split(\" \")\n         \n         var l = (a.length);\n        \n        if ( l > numbers) {      \n   \n    var new_sentence = []\n   for (var j=0; j<l;j++){\n   if(j>(l-numbers-1)){\n   new_sentence[j] = a[j]\n   }else{\n   new_sentence[j] = a[l-numbers-j-1]\n   }\n   }\n  \n   main_sent.push(new_sentence.join(\" \"))\n   \n        }\n        else {\n   \n   main_sent.push(a.join(\" \"))\n    \n       }\n      \n       }\n       var answer = main_sent.join(\".\")\n   alert(answer);\n   \n   \n   }\n\n \n\n  handleChange(event) {\n    this.setState({\n      [event.target.name] : event.target.value\n      \n    });\n  }\n  \n  \n\n  \n\n  render() {\n\n   \n    return (\n      <div  className=\"mydiv\">\n        \n      <h3>Input String</h3>\n       \n      <TextareaAutosize name= \"inputs\" aria-label=\"minimum height\" rowsMin={3} placeholder=\"Please Enter String\" value={this.state.inputs} onChange={this.handleChange} />\n      <p>Skip Last <TextField className=\"mytext\" name=\"numbers\" size=\"small\" variant=\"outlined\" value={this.state.numbers} onChange={this.handleChange}></TextField> \n      Words in a sentence </p>\n      <Button variant=\"contained\" color=\"primary\"  onClick={this.Reverse}>\n  Run\n</Button>\n        \n       \n        </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}